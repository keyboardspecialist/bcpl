

uniform mat4 matrix;  // Rotation and translation matrix
uniform mat4 control; // Control matrix

attribute vec4 g_vVertex;
attribute vec4 g_vColor;
attribute vec2 g_vData;   // data[0]=ctrl   data[1]=value

varying   vec4 g_vVSColor;

void main()
{ float ctrl = g_vData[0];
  // 1.0 rudder 2.0 elevator 3.0 left aileron 4.0 right aileron

  g_vVSColor = g_vColor;

  // For fun, use the xyz coordinates to adjust the colour a little
  //g_vVSColor = g_vColor*0.9 + g_vVertex * 0.40;

  // Deal with the control surfaces

  if (ctrl > 0.0) {
    float dist = g_vData[1];     // Distance from the hinge in feet

    vec4 Pos = g_vVertex;        // Coordinates of the vertex

    Pos.w = 1.0;

    if (ctrl==1.0) { // Rudder
      float cr = control[0][0];  // Cos of the angle
      float sr = control[0][1];  // Sin of the angle
      Pos.x += dist * (1.0-cr);  // x is the forward direction
      Pos.y += dist * sr;        // y is direction left
    }
    if (ctrl==2.0) { // Elevator
      float ce = control[0][2];
      float se = control[0][3];
      Pos.x += dist * (1.0 - ce);
      Pos.z += dist * se;        // z is direction up
    }
    if (ctrl==3.0) { // Left aileron
      float ca = control[1][0];
      float sa = control[1][1];
      Pos.x += dist * (1.0-ca);
      Pos.z += dist * sa;        // z is direction up
    }
    if (ctrl==4.0) { // Right aileron
      float ca = control[1][0];
      float sa = control[1][1];
      Pos.x += dist * (1.0-ca);
      Pos.z -= dist * sa;        // z is direction up
    }
    
    //if (ctrl>=6.0) {
    //  // A corner of the pixel plane so do not apply the matrix
    //  gl_Position = g_vVertex;
    //  g_vVSColor.a = 0.6;
    //  //g_vVSColor = vec4(1.0, 0.5, 0.3, 0.1);
    //} else {
      // Rotate and translate the model
      gl_Position = (matrix * Pos);
    //}

  } else {

    // Rotate and translate the model
    gl_Position = (matrix * g_vVertex);
  }
}
